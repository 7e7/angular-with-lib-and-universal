@import './spacing-variables.scss';

// Reusable Mixin functions

/* List of valid vendors. */
$prefix-list: webkit moz o ms;

/*
  Description:
    Prefixes the rule with the desired vendor prefix.
  Usage:
    @include prefix(transition-duration, 0.5, webkit moz o ms);
*/
@mixin prefix($property, $value, $prefixes) {
  @each $prefix in $prefixes {
    @if (index($prefix-list, $prefix)) {
      #{'-' + $prefix + '-' + $property}: $value;
    }
  }
  #{$property}: $value;
}

// Provide pixel size to get rem, based on 16pt scale
@function calculateRem($size) {
  $remSize: $size / 16;
  @return #{$remSize}rem;
}

// When focus states have a thicker border,
// padding needs to be offset so that contents don't get squished
@function padding-offset($spacing-number, $offset) {
  @return calc(#{map-get($spacing, $spacing-number)} - #{$offset});
}

@mixin padding-offset($direction, $spacing-number, $offset) {
  $offset: padding-offset($spacing-number, $offset);

  @if $direction == 'l' or $direction == 'h' or $direction == 'a' {
    padding-left: $offset;
  }

  @if $direction == 'r' or $direction == 'h' or $direction == 'a' {
    padding-right: $offset;
  }

  @if $direction == 't' or $direction == 'v' or $direction == 'a' {
    padding-top: $offset;
  }

  @if $direction == 'b' or $direction == 'v' or $direction == 'a' {
    padding-bottom: $offset;
  }
}

/* ===== Grid Utilities ===== */

// Retrieves the total sum of the widths columns
@mixin col-width($col) {
  width: calc(#{percentage($col/12) - #{$grid-gap-mobile}});

  @media #{$breakpoint-not-small} {
    width: calc(#{percentage($col/12) - #{$grid-gap}});
  }
}
@mixin mr-offset($col-offset) {
  margin-right: calc(#{percentage($col-offset/12) + #{$grid-gap/2}});
}
@mixin ml-offset($col-offset) {
  margin-left: calc(#{percentage($col-offset/12) + #{$grid-gap/2}});
}

@mixin col-margin() {
  margin-right: calc(#{$grid-gap-mobile} / 2);
  margin-left: calc(#{$grid-gap-mobile} / 2);
  margin-bottom: calculateRem(8);

  &.mb0 {
    margin-bottom: 0;
  }

  @media #{$breakpoint-not-small} {
    margin-right: calc(#{$grid-gap} / 2);
    margin-left: calc(#{$grid-gap} / 2);
    margin-bottom: calculateRem(8);
  }

  @media #{$breakpoint-not-small} {
    margin-bottom: $grid-gap;
    &.mb0 {
      margin-bottom: 0;
    }
  }
}

@mixin create-col($col) {
  @include col-width($col);
  @include col-margin;

  @supports (display: grid) {
    grid-column: span #{$col};
    margin: 0;
    width: auto;
  }
}
